apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: notationsigningverification
  annotations:
    metadata.gatekeeper.sh/title: "Require Image Signed by Notation"
    metadata.gatekeeper.sh/version: 1.0.0
    description: >-
      Requires the deployed image to have a valid signature attached in the container registry
spec:
  crd:
    spec:
      names:
        kind: NotationSigningVerification
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            issuer:
              description: the expected issuer of the certificate used to sign the image
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package notationsigningverification
        import future.keywords.if
        
        violation[{"msg": msg}] {
          # Get data from Ratify
          images := [img | img = input.review.object.spec.containers[_].image]
          response := external_data({"provider": "ratify-provider", "keys": images})
          # check for errors & policy
          msg := response_with_error(response)
        }

        # check for system errors
        response_with_error(response) := msg if {
          err := response.system_error
          err != ""
          msg := sprintf("System error calling external data provider: %s", err)
        }

        # check for Ratify execution errors
        response_with_error(response) := msg if {
          count(response.errors) > 0
          msg = sprintf("Error validating one or more images: %s", response.errors)
        }

        # Ratify verifier validation
        response_with_error(response) := msg if {
          subject_results := response.responses[_]
          subject := subject_results[0]
          result := subject_results[1]
          msg := signature_validation(result, subject)
        }

        # signature validation
        signature_validation(result, subject) := msg if {
          notaryv2_results := [res | result.verifierReports[i].isSuccess == true; result.verifierReports[i].name == "notaryv2"; result.verifierReports[i].extensions.Issuer == input.parameters.issuer; res := result.verifierReports[i]]
          success_count := count(notaryv2_results)
          success_count == 0
          msg := sprintf("Subject %s failed signature validation", [subject])
        }