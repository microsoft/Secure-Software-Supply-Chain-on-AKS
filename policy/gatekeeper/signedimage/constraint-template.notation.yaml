apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: notationsigningverification
  annotations:
    metadata.gatekeeper.sh/title: "Require Image Signed by Notation"
    metadata.gatekeeper.sh/version: 1.0.0
    description: >-
      Requires the deployed image to have a valid signature attached in the container registry
spec:
  crd:
    spec:
      names:
        kind: NotationSigningVerification
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            issuer:
              description: the expected issuer of the certificate used to sign the image
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package notationsigningverification
        import future.keywords.if
        import future.keywords.in
        import future.keywords.every

        violation[{"msg": msg}] {
          # Get data from Ratify
          images := [img | img = input.review.object.spec.containers[_].image]
          response := external_data({"provider": "ratify-provider", "keys": images})
          # check for errors & policy
          msg := response_with_error(response)
        }

        # check for errors
        response_with_error(response) := msg if {
          errors := response.errors[_]
          subject := errors[0]
          err := errors[1]
          msg := sprintf("Failed evaluation of subject %s: %s", [subject, err])
        }

        # check responses
        response_with_error(response) := msg if {
          subject_results := response.responses[_]
          subject := subject_results[0]
          result := subject_results[1]
          reports := result.verifierReports
          msg := eval_ratify_response(reports, subject)
        }

        eval_ratify_response(reports, subject) := artifactMsg if {
          lacks_referrers(reports)
          artifactMsg := sprintf("Subject %s lacks referrers", [subject])
        } else := artifactMsg if {
          lacks_signature(reports)
          artifactMsg := sprintf("Subject %s lacks a signature", [subject])
        } else := artifactMsg if { 
          not has_trusted_signature(reports)
          artifactMsg := sprintf("Subject %s failed signature validation", [subject])
        }

        has_trusted_signature(reports) {
          some report in reports
            report.artifactType == "application/vnd.cncf.notary.signature"
            report.type == "notation"
            report.extensions.Issuer == input.parameters.issuer
            report.isSuccess == true
        }

        lacks_referrers(reports) {
          every report in reports {
            report.isSuccess == false
            contains(report.message, "REFERRERS_NOT_FOUND")
          }
        }

        lacks_signature(reports) {
          every report in reports {
            report.artifactType != "application/vnd.cncf.notary.signature"
            report.type != "notation"
          }
        }