apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: sbomverification
  annotations:
    metadata.gatekeeper.sh/title: "Require signed SBOM"
    metadata.gatekeeper.sh/version: 1.0.0
    description: >-
      Requires the deployed image to have a valid signed SBOM attached in the container registry
spec:
  crd:
    spec:
      names:
        kind: SbomVerification
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            issuer:
              description: the expected issuer of the certificate used to sign the image
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package sbomverification
        import future.keywords.if
        
        violation[{"msg": msg}] {
          # Get data from Ratify
          images := [img | img = input.review.object.spec.containers[_].image]
          response := external_data({"provider": "ratify-provider", "keys": images})
          # check for errors & policy
          msg := response_with_error(response)
        }

        # check for system errors
        response_with_error(response) := msg if {
          err := response.system_error
          err != ""
          msg := sprintf("System error calling external data provider: %s", err)
        }

        # check for Ratify execution errors
        response_with_error(response) := msg if {
          count(response.errors) > 0
          msg = sprintf("Error validating one or more images: %s", response.errors)
        }

        # Ratify verifier validation
        response_with_error(response) := msg if {
          subject_results := response.responses[_]
          subject := subject_results[0]
          result := subject_results[1].verifierReports
          msg := verifier_validation(result, subject)
        }
        
        verifier_validation(result, subject) := artifactMsg if {
          # no SBOM verifier results for the artifact type
          verifier_results := [res |
            result[i].name == "sbom"
            res := result[i]
            ]
          count(verifier_results) == 0
          artifactMsg := sprintf("Subject %s failed as no SBOMs were found", [subject])
        } else := artifactMsg if {
          # no successful sbom verifier results
          verifier_results := [res |
            result[i].name == "sbom"
            result[i].isSuccess == false
            res := result[i].message
          ]
          count(verifier_results) > 0
          artifactMsg := sprintf("Subject %s failed as SBOM(s) were invalid: %s", [subject, verifier_results])
        } else := artifactMsg if {
          # successful sbom results for the artifact type lack nested results
          nested_results := [res |
            result[i].name == "sbom"
            result[i].isSuccess == true
            res := result[i].nestedResults
          ]
          count({n | nested_results[n]}) == 0
          artifactMsg := sprintf("Subject %s failed as the SBOM lacks nested artifacts", [subject])
        } else := artifactMsg if {
          # successful sbom results for the artifact type lack signatures
          nested_results := [res |
            result[i].name == "sbom"
            result[i].isSuccess == true
            res := result[i].nestedResults
          ]
          signatures := [s |
            nested_results[x][j].name == "notaryv2"
            s := nested_results[x][j]
          ]
          count(signatures) == 0
          artifactMsg := sprintf("Subject %s failed as the SBOM lacks a signature", [subject])
        } else := artifactMsg if {
          # successful sbom results lack successful signatures
          nested_results := [res |
            result[i].name == "sbom"
            result[i].isSuccess == true
            res := result[i].nestedResults
          ]
          failed_signatures := [notation |
            nested_results[x][s].name == "notaryv2"
            nested_results[x][s].isSuccess == false
            notation := nested_results[x][s].message
          ]
          count(failed_signatures) > 0
          artifactMsg := sprintf("Subject %s failed as SBOM's signature(s) failed validation: %s", [subject, failed_signatures])
        } else := artifactMsg if {
          # successful sbom results for the artifact type lack successful signatures from the correct issuer
          nested_results := [res |
            result[i].name == "sbom"
            result[i].isSuccess == true
            res := result[i].nestedResults
          ]
          invalid_signature_issuer := [notation |
            nested_results[x][s].name == "notaryv2"
            nested_results[x][s].isSuccess == true
            nested_results[x][s].extensions.Issuer != input.parameters.issuer
            notation := nested_results[x][s].extensions.Issuer
          ]
          count(invalid_signature_issuer) > 0
          artifactMsg := sprintf("Subject %s failed as SBOM's signature(s) issuers did not match expected (%s): %s", [subject, input.parameters.issuer, invalid_signature_issuer])
        }